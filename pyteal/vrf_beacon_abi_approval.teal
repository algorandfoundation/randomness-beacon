#pragma version 7
txna ApplicationArgs 0
method "create_app(uint64,byte[80],byte[32],address)void"
==
bnz main_l12
txna ApplicationArgs 0
method "rotate_vrf_key(byte[32])void"
==
bnz main_l11
txna ApplicationArgs 0
method "rotate_rotation_controller(address)void"
==
bnz main_l10
txna ApplicationArgs 0
method "submit(uint64,byte[80])void"
==
bnz main_l9
txna ApplicationArgs 0
method "get(uint64,byte[])byte[]"
==
bnz main_l8
txna ApplicationArgs 0
method "must_get(uint64,byte[])byte[]"
==
bnz main_l7
err
main_l7:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 14
txna ApplicationArgs 2
store 15
load 14
load 15
callsub mustget_16
store 16
byte 0x151f7c75
load 16
concat
log
int 1
return
main_l8:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 8
txna ApplicationArgs 2
store 9
load 8
load 9
callsub get_15
store 10
byte 0x151f7c75
load 10
concat
log
int 1
return
main_l9:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 6
txna ApplicationArgs 2
store 7
load 6
load 7
callsub submit_14
int 1
return
main_l10:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
store 5
load 5
callsub rotaterotationcontroller_13
int 1
return
main_l11:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
!=
&&
assert
txna ApplicationArgs 1
store 4
load 4
callsub rotatevrfkey_12
int 1
return
main_l12:
txn OnCompletion
int NoOp
==
txn ApplicationID
int 0
==
&&
assert
txna ApplicationArgs 1
btoi
store 0
txna ApplicationArgs 2
store 1
txna ApplicationArgs 3
store 2
txna ApplicationArgs 4
store 3
load 0
load 1
load 2
load 3
callsub createapp_11
int 1
return

// get_vrf_round_from_round
getvrfroundfromround_0:
store 31
load 31
int 7
+
int 8
/
int 8
*
retsub

// get_slot_from_round
getslotfromround_1:
store 30
load 30
callsub getvrfroundfromround_0
int 8
/
int 189
%
int 3
/
retsub

// get_cell_from_round
getcellfromround_2:
store 32
load 32
callsub getvrfroundfromround_0
int 8
/
int 189
%
int 3
%
retsub

// put_stored_vrf_output
putstoredvrfoutput_3:
store 28
store 27
load 28
len
int 32
==
assert
load 27
callsub getslotfromround_1
itob
store 29
load 29
load 29
app_global_get
load 28
load 27
callsub getcellfromround_2
callsub updateslotwithnewvrfoutput_4
app_global_put
retsub

// update_slot_with_new_vrf_output
updateslotwithnewvrfoutput_4:
store 35
store 34
store 33
load 35
int 0
==
bnz updateslotwithnewvrfoutput_4_l6
load 35
int 1
==
bnz updateslotwithnewvrfoutput_4_l5
load 35
int 2
==
bnz updateslotwithnewvrfoutput_4_l4
err
updateslotwithnewvrfoutput_4_l4:
load 33
extract 0 64
load 34
concat
b updateslotwithnewvrfoutput_4_l7
updateslotwithnewvrfoutput_4_l5:
load 33
extract 0 32
load 34
concat
load 33
extract 64 32
concat
b updateslotwithnewvrfoutput_4_l7
updateslotwithnewvrfoutput_4_l6:
load 34
load 33
extract 32 64
concat
updateslotwithnewvrfoutput_4_l7:
retsub

// verify_vrf
verifyvrf_5:
store 38
store 37
store 36
load 36
itob
load 36
block BlkSeed
concat
sha512_256
load 37
load 38
vrf_verify VrfAlgorand
store 40
store 39
load 40
int 1
==
assert
load 39
extract 0 32
retsub

// verify_and_store_vrf
verifyandstorevrf_6:
store 26
store 25
store 24
load 24
load 24
load 25
load 26
callsub verifyvrf_5
callsub putstoredvrfoutput_3
retsub

// get_random_output
getrandomoutput_7:
store 52
store 51
load 51
callsub getslotfromround_1
itob
app_global_get
int 32
load 51
callsub getcellfromround_2
*
int 32
extract3
load 51
itob
concat
load 52
concat
sha3_256
retsub

// init_global_state
initglobalstate_8:
store 43
store 42
store 41
int 0
store 44
initglobalstate_8_l1:
load 44
int 63
<
bz initglobalstate_8_l3
load 44
itob
byte "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
app_global_put
load 44
int 1
+
store 44
b initglobalstate_8_l1
initglobalstate_8_l3:
byte ""
load 41
itob
load 41
itob
concat
load 42
concat
load 43
concat
app_global_put
retsub

// is_round_in_valid_range
isroundinvalidrange_9:
store 53
load 53
callsub getvrfroundfromround_0
byte ""
app_global_get
int 0
extract_uint64
<=
load 53
callsub getvrfroundfromround_0
byte ""
app_global_get
int 8
extract_uint64
>=
&&
retsub

// is_valid_recovering_round
isvalidrecoveringround_10:
store 50
load 50
int 8
%
int 0
==
load 50
byte ""
app_global_get
int 0
extract_uint64
int 8
+
>
&&
load 50
int 1000
+
global Round
int 16
+
<=
&&
retsub

// create_app
createapp_11:
store 23
store 22
store 21
store 20
load 20
int 8
%
int 0
==
assert
load 22
len
int 32
==
assert
load 20
load 22
load 23
callsub initglobalstate_8
load 20
load 21
load 22
callsub verifyandstorevrf_6
retsub

// rotate_vrf_key
rotatevrfkey_12:
store 45
txn Sender
byte ""
app_global_get
extract 48 32
==
assert
byte ""
byte ""
app_global_get
int 0
extract_uint64
itob
byte ""
app_global_get
int 8
extract_uint64
itob
concat
load 45
concat
byte ""
app_global_get
extract 48 32
concat
app_global_put
retsub

// rotate_rotation_controller
rotaterotationcontroller_13:
store 46
txn Sender
byte ""
app_global_get
extract 48 32
==
assert
byte ""
byte ""
app_global_get
int 0
extract_uint64
itob
byte ""
app_global_get
int 8
extract_uint64
itob
concat
byte ""
app_global_get
extract 16 32
concat
load 46
concat
app_global_put
retsub

// submit
submit_14:
store 48
store 47
byte ""
app_global_get
int 0
extract_uint64
int 8
+
load 47
==
load 47
callsub isvalidrecoveringround_10
||
assert
load 47
callsub isvalidrecoveringround_10
store 49
load 47
load 48
byte ""
app_global_get
extract 16 32
callsub verifyandstorevrf_6
byte ""
load 47
itob
byte ""
app_global_get
int 8
extract_uint64
itob
concat
byte ""
app_global_get
extract 16 32
concat
byte ""
app_global_get
extract 48 32
concat
app_global_put
load 49
bnz submit_14_l3
byte ""
app_global_get
int 0
extract_uint64
byte ""
app_global_get
int 8
extract_uint64
-
int 1512
>=
bz submit_14_l4
byte ""
byte ""
app_global_get
int 0
extract_uint64
itob
byte ""
app_global_get
int 0
extract_uint64
int 1504
-
itob
concat
byte ""
app_global_get
extract 16 32
concat
byte ""
app_global_get
extract 48 32
concat
app_global_put
b submit_14_l4
submit_14_l3:
byte ""
byte ""
app_global_get
int 0
extract_uint64
itob
load 47
itob
concat
byte ""
app_global_get
extract 16 32
concat
byte ""
app_global_get
extract 48 32
concat
app_global_put
submit_14_l4:
retsub

// get
get_15:
store 12
store 11
load 11
callsub isroundinvalidrange_9
!
bnz get_15_l2
load 11
load 12
extract 2 0
callsub getrandomoutput_7
store 13
load 13
len
itob
extract 6 0
load 13
concat
store 13
b get_15_l3
get_15_l2:
byte ""
store 13
load 13
len
itob
extract 6 0
load 13
concat
store 13
get_15_l3:
load 13
retsub

// must_get
mustget_16:
store 18
store 17
load 17
callsub isroundinvalidrange_9
assert
load 17
load 18
extract 2 0
callsub getrandomoutput_7
store 19
load 19
len
itob
extract 6 0
load 19
concat
store 19
load 19
retsub